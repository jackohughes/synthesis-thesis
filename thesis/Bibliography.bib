@article{HODAS1994327,
title = "{Logic Programming in a Fragment of Intuitionistic Linear Logic}",
journal = "Information and Computation",
volume = "110",
number = "2",
pages = "327 - 365",
year = "1994",
issn = "0890-5401",
doi = "https://doi.org/10.1006/inco.1994.1036",
author = "J.S. Hodas and D. Miller",
abstract = "When logic programming is based on the proof theory of intuitionistic logic, it is natural to allow implications in goals and in the bodies of clauses. Attempting to prove a goal of the form D ⊃ G from the context (set of formulas) Γ leads to an attempt to prove the goal G in the extended context Γ ∪ {D}. Thus contexts, represented as the left-hand side of intuitionistic sequents, grow as stacks during the bottom-up search for a cut-free proof. While such an intuitionistic notion of context provides for elegant specifications of many computations, contexts can be made more expressive and flexible if they are based on linear logic. After presenting two equivalent formulations of a fragment of linear logic, we show that the fragment has a goal-directed interpretation, thereby partially justifying calling it a logic program-ming language. Logic programs based on the intuitionistic theory of hereditary Harrop formulas can be modularly embedded into this linear logic setting. Programming examples taken from theorem proving, natural language parsing, and data base programming are presented: each example requires a linear, rather than intuitionistic, notion of context to be modeled adequately. An interpreter for this logic programming language must address the problem of splitting contexts; that is, in the attempt to prove a multiplicative conjunction (tensor), say G1 ⊗ G2, from the context Δ the latter must be split into disjoint contexts Δ1 and Δ2 for which G1 follows from Δ1 and G2 follows from Δ2. Since there is an exponential number of such splits, it is important to delay the choice of a split as much as possible. A mechanism for the lazy splitting of contexts is presented based on viewing proof search as a process that takes a context, consumes part of it, and returns the rest (to be consumed elsewhere). In addition, we use collections of Kripke interpretations indexed by a commutative monoid to provide models for this logic programming language and show that logic programs admit canonical models."
}
@article{CERVESATO2000133,
title = "Efficient resource management for linear logic proof search",
journal = "Theoretical Computer Science",
volume = "232",
number = "1",
pages = "133 - 163",
year = "2000",
issn = "0304-3975",
doi = "https://doi.org/10.1016/S0304-3975(99)00173-5",
author = "Iliano Cervesato and Joshua S. Hodas and Frank Pfenning",
keywords = "Linear logic, Theorem proving, Logic programming",
abstract = "The design of linear logic programming languages and theorem provers opens a number of new implementation challenges not present in more traditional logic languages such as Horn clauses (Prolog) and hereditary Harrop formulas (λProlog and Elf). Among these, the problem of efficiently managing the linear context when solving a goal is of crucial importance for the use of these systems in non-trivial applications. This paper studies this problem in the case of Lolli [10], though its results have application to other systems including those based on linear type theory. We first give a proof-theoretic presentation of the operational semantics of this language as a resolution calculus. We then present a series of resource management systems designed to eliminate the non-determinism in the distribution of linear formulas that undermines the efficiency of a direct implementation of this system."
}

@article{smirnov2008graded,
year={2008},
issn={1072-3374},
journal={Journal of Mathematical Sciences},
volume={151},
number={3},
doi={10.1007/s10958-008-9013-7},
title={Graded monads and rings of polynomials},
url={http://dx.doi.org/10.1007/s10958-008-9013-7},
publisher={Springer US},
author={Smirnov, A.L.},
pages={3032-3051},
language={English}}

@article{diffprivacysynthesis,
author = {Smith, Calvin and Albarghouthi, Aws},
title = {Synthesizing Differentially Private Programs},
year = {2019},
issue_date = {July 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {ICFP},
doi = {10.1145/3341698},
journal = {Proc. ACM Program. Lang.},
month = jul,
articleno = {Article 94},
numpages = {29},
keywords = {linear type systems, program synthesis, differential privacy}
}


@article{DBLP:journals/corr/abs-1904-07415,
  author    = {Tristan Knoth and
               Di Wang and
               Nadia Polikarpova and
               Jan Hoffmann},
  title     = {Resource-{G}uided {P}rogram {S}ynthesis},
  journal   = {CoRR},
  volume    = {abs/1904.07415},
  year      = {2019},
  url       = {http://arxiv.org/abs/1904.07415},
  archivePrefix = {arXiv},
  eprint    = {1904.07415},
  timestamp = {Thu, 25 Apr 2019 13:55:01 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-1904-07415.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@article{10.1145/2480359.2429113,
author = {Gaboardi, Marco and Haeberlen, Andreas and Hsu, Justin and Narayan, Arjun and Pierce, Benjamin C.},
title = {Linear Dependent Types for Differential Privacy},
year = {2013},
issue_date = {January 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {48},
number = {1},
issn = {0362-1340},
doi = {10.1145/2480359.2429113},
journal = {SIGPLAN Not.},
month = jan,
pages = {357–370},
numpages = {14},
keywords = {differential privacy, type systems, dependent types, linear logic}
}

@inproceedings{10.1145/2429069.2429113,
author = {Gaboardi, Marco and Haeberlen, Andreas and Hsu, Justin and Narayan, Arjun and Pierce, Benjamin C.},
title = {Linear Dependent Types for Differential Privacy},
year = {2013},
isbn = {9781450318327},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
doi = {10.1145/2429069.2429113},
booktitle = {Proceedings of the 40th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {357–370},
numpages = {14},
keywords = {differential privacy, type systems, dependent types, linear logic},
location = {Rome, Italy},
series = {POPL ’13}
}
@inproceedings{10.1007/11532231_6,
author = {Chaudhuri, Kaustuv and Pfenning, Frank},
title = {{A Focusing Inverse Method Theorem Prover for First-Order Linear Logic}},
year = {2005},
isbn = {3540280057},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
doi = {10.1007/11532231\_6},
booktitle = {Proceedings of the 20th International Conference on Automated Deduction},
pages = {69–83},
numpages = {15},
location = {Tallinn, Estonia},
series = {CADE’ 20}
}
@inproceedings{10.1007/11538363_15,
author = {Chaudhuri, Kaustuv and Pfenning, Frank},
title = {{Focusing the Inverse Method for Linear Logic}},
year = {2005},
isbn = {3540282319},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
doi = {10.1007/11538363\_15},
booktitle = {Proceedings of the 19th International Conference on Computer Science Logic},
pages = {200–215},
numpages = {16},
location = {Oxford, UK},
series = {CSL’05}
}
@article{DBLP:journals/corr/PolikarpovaS15,
  author    = {Nadia Polikarpova and
               Armando Solar{-}Lezama},
  title     = {Program Synthesis from {P}olymorphic {R}efinement {T}ypes},
  journal   = {CoRR},
  volume    = {abs/1510.08419},
  year      = {2015},
  url       = {http://arxiv.org/abs/1510.08419},
  archivePrefix = {arXiv},
  eprint    = {1510.08419},
  timestamp = {Mon, 13 Aug 2018 16:46:41 +0200},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@article{oseraMYTH1,
author = {Osera, Peter-Michael and Zdancewic, Steve},
title = {Type-and-Example-Directed Program Synthesis},
year = {2015},
issue_date = {June 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {50},
number = {6},
issn = {0362-1340},
doi = {10.1145/2813885.2738007},
journal = {SIGPLAN Not.},
month = jun,
pages = {619–630},
numpages = {12},
keywords = {Program Syn- thesis, Proof Search, Type Theory, Functional Programming}
}
@article{article,
author = {Tammet, Tanel},
year = {1994},
month = {07},
pages = {},
title = {Proof Strategies in Linear Logic},
volume = {12},
journal = {Journal of Automated Reasoning},
doi = {10.1007/BF00885763}
}

@article{harlandpym,
  author    = {James Harland and
               David J. Pym},
  title     = {Resource-distribution via Boolean constraints},
  journal   = {CoRR},
  volume    = {cs.LO/0012018},
  year      = {2000},
  url       = {https://arxiv.org/abs/cs/0012018},
  timestamp = {Fri, 10 Jan 2020 12:58:45 +0100},
  biburl    = {https://dblp.org/rec/journals/corr/cs-LO-0012018.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}


@article{dfuzz,
author = {Gaboardi, Marco and Haeberlen, Andreas and Hsu, Justin and Narayan, Arjun and Pierce, Benjamin C.},
title = {Linear Dependent Types for Differential Privacy},
year = {2013},
issue_date = {January 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {48},
number = {1},
issn = {0362-1340},
doi = {10.1145/2480359.2429113},
journal = {SIGPLAN Not.},
month = jan,
pages = {357–370},
numpages = {14},
keywords = {type systems, differential privacy, linear logic, dependent types}
}
@article{girard1987linear,
title = "Linear logic",
journal = "Theoretical Computer Science",
volume = "50",
number = "1",
pages = "1 - 101",
year = "1987",
issn = "0304-3975",
doi = "https://doi.org/10.1016/0304-3975(87)90045-4",
author = "Jean-Yves Girard",
abstract = "The familiar connective of negation is broken into two operations: linear negation which is the purely negative part of negation and the modality “of course” which has the meaning of a reaffirmation. Following this basic discovery, a completely new approach to the whole area between constructive logics and programmation is initiated."
}

@article{DBLP:journals/pacmpl/OrchardLE19,
  author    = {Dominic Orchard and
               Vilem{-}Benjamin Liepelt and
               Harley Eades III},
  title     = {Quantitative program reasoning with graded modal types},
  journal   = {{PACMPL}},
  volume    = {3},
  number    = {{ICFP}},
  pages     = {110:1--110:30},
  year      = {2019},
  doi       = {10.1145/3341714},
  timestamp = {Mon, 21 Oct 2019 15:15:21 +0200},
  biburl    = {https://dblp.org/rec/journals/pacmpl/OrchardLE19.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{logict,
author = {Kiselyov, Oleg and Shan, Chung-chieh and Friedman, Daniel P. and Sabry, Amr},
title = {Backtracking, Interleaving, and Terminating Monad Transformers: (Functional Pearl)},
year = {2005},
issue_date = {September 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {40},
number = {9},
issn = {0362-1340},
doi = {10.1145/1090189.1086390},
journal = {SIGPLAN Not.},
month = sep,
pages = {192–203},
numpages = {12},
keywords = {Prolog, control delimiters, continuations, streams, Haskell, logic programming}
}

@article{focusing,
    author = {Andreoli, Jean-Marc},
    title = {Logic Programming with Focusing Proofs in Linear Logic},
    journal = {Journal of Logic and Computation},
    volume = {2},
    number = {3},
    pages = {297-347},
    year = {1992},
    month = {06},
    issn = {0955-792X},
    doi = {10.1093/logcom/2.3.297},
    eprint = {https://academic.oup.com/logcom/article-pdf/2/3/297/6137548/2-3-297.pdf},
}
@article{10.1145/321992.322002,
author = {Summers, Phillip D.},
title = {A Methodology for LISP Program Construction from Examples},
year = {1977},
issue_date = {Jan. 1977},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {24},
number = {1},
issn = {0004-5411},
url = {https://doi.org/10.1145/321992.322002},
doi = {10.1145/321992.322002},
journal = {J. ACM},
month = {jan},
pages = {161–175},
numpages = {15}
}

@article{deadalus,
author = {Manna, Zohar and Waldinger, Richard},
year = {1979},
month = {08},
pages = {294- 328},
title = {Synthesis: Dreams → Programs},
volume = {SE-5},
journal = {Software Engineering, IEEE Transactions on},
doi = {10.1109/TSE.1979.234198}
}


@inproceedings{z3,
author = {de Moura, Leonardo and Bjørner, Nikolaj},
year = {2008},
month = {04},
pages = {337-340},
title = {Z3: an efficient SMT solver},
volume = {4963},
journal = {Tools and Algorithms for the Construction and Analysis of Systems},
}

@article{Gentzen1935UntersuchungenD,
  title={Untersuchungen {\"u}ber das logische Schlie{\ss}en. II},
  author={Gerhard Gentzen},
  journal={Mathematische Zeitschrift},
  year={1935},
  volume={39},
  pages={405-431}
}

@incollection{curryhoward1980,
  author    = { Howard, William A. },
  editor    = { Seldin, Jonathan P. and Hindley, J. Roger },
  title     = { The {F}ormulae-as-types {N}otion of {C}onstruction },
  booktitle = { To H.B. Curry: Essays on Combinatory Logic, Lambda Calculus and Formalism },
  publisher = { Academic Press },
  year      = { 1980 },
}

@incollection{DEGTYAREV2001179,
title = "Chapter 4 - The Inverse Method",
editor = "Alan Robinson and Andrei Voronkov",
booktitle = "Handbook of Automated Reasoning",
publisher = "North-Holland",
address = "Amsterdam",
pages = "179 - 272",
year = "2001",
series = "Handbook of Automated Reasoning",
isbn = "978-0-444-50813-3",
doi = "https://doi.org/10.1016/B978-044450813-3/50006-0",
author = "Anatoli Degtyarev and Andrei Voronkov"
}

@misc{lygon,
title={Logic Programming with Linear Logic},
url={http://www.cs.rmit.edu.au/lygon/.},
note={Accessed 19th June 2020}
}

@inproceedings{allais2018typing,
  title={{Typing with Leftovers-A mechanization of Intuitionistic Multiplicative-Additive Linear Logic}},
  author={Allais, Guillaume},
  booktitle={23rd International Conference on Types for Proofs and Programs (TYPES 2017)},
  year={2018},
  organization={Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik}
}

@article{zalakain2020pi,
  title={Pi with leftovers: a mechanisation in {A}gda},
  author={Zalakain, Uma and Dardha, Ornela},
  journal={arXiv preprint arXiv:2005.05902},
  year={2020}
}

@inproceedings{DBLP:conf/popl/Katsumata14,
  author    = {Shin{-}ya Katsumata},
  editor    = {Suresh Jagannathan and
               Peter Sewell},
  title     = {Parametric effect monads and semantics of effect systems},
  booktitle = {The 41st Annual {ACM} {SIGPLAN-SIGACT} Symposium on Principles of
               Programming Languages, {POPL} '14, San Diego, CA, USA, January 20-21,
               2014},
  pages     = {633--646},
  publisher = {{ACM}},
  year      = {2014},
  doi       = {10.1145/2535838.2535846},
  timestamp = {Tue, 06 Nov 2018 11:07:44 +0100},
  biburl    = {https://dblp.org/rec/conf/popl/Katsumata14.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/fossacs/Katsumata18,
  author    = {Shin{-}ya Katsumata},
  editor    = {Christel Baier and
               Ugo Dal Lago},
  title     = {A Double Category Theoretic Analysis of Graded Linear Exponential
               Comonads},
  booktitle = {Foundations of Software Science and Computation Structures - 21st
               International Conference, {FOSSACS} 2018,
               Thessaloniki, Greece, April 14-20, 2018},
  series    = {Lecture Notes in Computer Science},
  volume    = {10803},
  pages     = {110--127},
  publisher = {Springer},
  year      = {2018},
  doi       = {10.1007/978-3-319-89366-2\_6},
  timestamp = {Fri, 31 Jan 2020 21:32:20 +0100},
  biburl    = {https://dblp.org/rec/conf/fossacs/Katsumata18.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/icfp/GaboardiKOBU16,
  author    = {Marco Gaboardi and
               Shin{-}ya Katsumata and
               Dominic A. Orchard and
               Flavien Breuvart and
               Tarmo Uustalu},
  editor    = {Jacques Garrigue and
               Gabriele Keller and
               Eijiro Sumii},
  title     = {Combining effects and coeffects via grading},
  booktitle = {Proceedings of the 21st {ACM} {SIGPLAN} International Conference on
               Functional Programming, {ICFP} 2016, Nara, Japan, September 18-22,
               2016},
  pages     = {476--489},
  publisher = {{ACM}},
  year      = {2016},
  doi       = {10.1145/2951913.2951939},
  timestamp = {Sun, 02 Jun 2019 21:13:13 +0200},
  biburl    = {https://dblp.org/rec/conf/icfp/GaboardiKOBU16.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/esop/BrunelGMZ14,
  author    = {Alo{\"{\i}}s Brunel and
               Marco Gaboardi and
               Damiano Mazza and
               Steve Zdancewic},
  editor    = {Zhong Shao},
  title     = {A Core Quantitative Coeffect Calculus},
  booktitle = {Programming Languages and Systems - 23rd European Symposium on Programming,
               {ESOP} 2014, Held as Part of the European Joint Conferences on Theory
               and Practice of Software, {ETAPS} 2014, Grenoble, France, April 5-13,
               2014, Proceedings},
  series    = {Lecture Notes in Computer Science},
  volume    = {8410},
  pages     = {351--370},
  publisher = {Springer},
  year      = {2014},
  doi       = {10.1007/978-3-642-54833-8\_19},
  timestamp = {Tue, 14 May 2019 10:00:41 +0200},
  biburl    = {https://dblp.org/rec/conf/esop/BrunelGMZ14.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:journals/corr/abs-1904-06850,
  author    = {Carlos Olarte and
               Valeria de Paiva and
               Elaine Pimentel and
               Giselle Reis},
  editor    = {Thomas Ehrhard and
               Maribel Fern{\'{a}}ndez and
               Valeria de Paiva and
               Lorenzo Tortora de Falco},
  title     = {The {ILLTP} Library for Intuitionistic Linear Logic},
  booktitle = {Proceedings Joint International Workshop on Linearity {\&} Trends
               in Linear Logic and Applications, Linearity-TLLA@FLoC 2018, Oxford,
               UK, 7-8 July 2018},
  series    = {{EPTCS}},
  volume    = {292},
  pages     = {118--132},
  year      = {2018},
  doi       = {10.4204/EPTCS.292.7},
  timestamp = {Fri, 27 Mar 2020 08:38:57 +0100},
  biburl    = {https://dblp.org/rec/journals/corr/abs-1904-06850.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/esop/GhicaS14,
  author    = {Dan R. Ghica and
               Alex I. Smith},
  editor    = {Zhong Shao},
  title     = {Bounded Linear Types in a Resource Semiring},
  booktitle = {Programming Languages and Systems - 23rd European Symposium on Programming,
               {ESOP} 2014},
  series    = {Lecture Notes in Computer Science},
  volume    = {8410},
  pages     = {331--350},
  publisher = {Springer},
  year      = {2014},
  doi       = {10.1007/978-3-642-54833-8\_18},
  timestamp = {Tue, 14 May 2019 10:00:41 +0200},
  biburl    = {https://dblp.org/rec/conf/esop/GhicaS14.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{manna1980deductive,
  title={A deductive approach to program synthesis},
  author={Manna, Zohar and Waldinger, Richard},
  journal={ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume={2},
  number={1},
  pages={90--121},
  year={1980},
  publisher={ACM New York, NY, USA}
}

@article{frankle2016example,
  title={Example-directed synthesis: a type-theoretic interpretation},
  author={Frankle, Jonathan and Osera, Peter-Michael and Walker, David and Zdancewic, Steve},
  journal={ACM SIGPLAN Notices},
  volume={51},
  number={1},
  pages={802--815},
  year={2016},
  publisher={ACM New York, NY, USA}
}

@inproceedings{gvero2013complete,
  title={Complete completion using types and weights},
  author={Gvero, Tihomir and Kuncak, Viktor and Kuraj, Ivan and Piskac, Ruzica},
  booktitle={Proceedings of the 34th ACM SIGPLAN conference on Programming language design and implementation},
  pages={27--38},
  year={2013}
}

@article{liang2009focusing,
  title={Focusing and polarization in linear, intuitionistic, and classical logics},
  author={Liang, Chuck and Miller, Dale},
  journal={Theoretical Computer Science},
  volume={410},
  number={46},
  pages={4747--4768},
  year={2009},
  publisher={Elsevier}
}

@article{DBLP:journals/lmcs/BucciarelliKR18,
  author    = {Antonio Bucciarelli and
               Delia Kesner and
               Simona Ronchi Della Rocca},
  title     = {Inhabitation for Non-idempotent Intersection Types},
  journal   = {Log. Methods Comput. Sci.},
  volume    = {14},
  number    = {3},
  year      = {2018},
  url       = {https://doi.org/10.23638/LMCS-14(3:7)2018},
  doi       = {10.23638/LMCS-14(3:7)2018},
  timestamp = {Thu, 18 Jun 2020 22:15:52 +0200},
  biburl    = {https://dblp.org/rec/journals/lmcs/BucciarelliKR18.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{DBLP:journals/igpl/BucciarelliKV17,
  author    = {Antonio Bucciarelli and
               Delia Kesner and
               Daniel Ventura},
  title     = {Non-idempotent intersection types for the Lambda-Calculus},
  journal   = {Log. J. {IGPL}},
  volume    = {25},
  number    = {4},
  pages     = {431--464},
  year      = {2017},
  url       = {https://doi.org/10.1093/jigpal/jzx018},
  doi       = {10.1093/jigpal/jzx018},
  timestamp = {Fri, 06 Mar 2020 22:00:04 +0100},
  biburl    = {https://dblp.org/rec/journals/igpl/BucciarelliKV17.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{paolini2017essential,
  title={Essential and relational models},
  author={Paolini, Luca and Piccolo, Mauro and Della Rocca, Simona Ronchi},
  journal={Mathematical Structures in Computer Science},
  volume={27},
  number={5},
  pages={626},
  year={2017},
  publisher={Cambridge University Press}
}

@article{clarke2017scrap,
  title={Scrap Your Reprinter},
  author={Clarke, Harry and Liepelt, Vilem-Benjamin and Orchard, Dominic},
  year={2017}
}

@article{10.1145/2980983.2908093,
author = {Polikarpova, Nadia and Kuraj, Ivan and Solar-Lezama, Armando},
title = {Program Synthesis from Polymorphic Refinement Types},
year = {2016},
issue_date = {June 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {51},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/2980983.2908093},
doi = {10.1145/2980983.2908093},
abstract = {We present a method for synthesizing recursive functions that provably satisfy a given specification in the form of a polymorphic refinement type. We observe that such specifications are particularly suitable for program synthesis for two reasons. First, they offer a unique combination of expressive power and decidability, which enables automatic verification—and hence synthesis—of nontrivial programs. Second, a type-based specification for a program can often be effectively decomposed into independent specifications for its components, causing the synthesizer to consider fewer component combinations and leading to a combinatorial reduction in the size of the search space. At the core of our synthesis procedure is a newalgorithm for refinement type checking, which supports specification decomposition. We have evaluated our prototype implementation on a large set of synthesis problems and found that it exceeds the state of the art in terms of both scalability and usability. The tool was able to synthesize more complex programs than those reported in prior work (several sorting algorithms and operations on balanced search trees), as well as most of the benchmarks tackled by existing synthesizers, often starting from a more concise and intuitive user input.},
journal = {SIGPLAN Not.},
month = {jun},
pages = {522–538},
numpages = {17},
keywords = {Predicate Abstraction, Program Synthesis, Refinement Types, Functional Programming}
}


@article{DBLP:journals/corr/abs-2104-00480,
  author    = {Edwin C. Brady},
  title     = {Idris 2: Quantitative Type Theory in Practice},
  journal   = {CoRR},
  volume    = {abs/2104.00480},
  year      = {2021},
  url       = {https://arxiv.org/abs/2104.00480},
  eprinttype = {arXiv},
  eprint    = {2104.00480},
  timestamp = {Mon, 12 Apr 2021 16:14:56 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-2104-00480.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{DBLP:journals/pacmpl/BernardyBNJS18,
  author    = {Jean{-}Philippe Bernardy and
               Mathieu Boespflug and
               Ryan R. Newton and
               Simon Peyton Jones and
               Arnaud Spiwack},
  title     = {Linear Haskell: practical linearity in a higher-order polymorphic
               language},
  journal   = {Proc. {ACM} Program. Lang.},
  volume    = {2},
  number    = {{POPL}},
  pages     = {5:1--5:29},
  year      = {2018},
  url       = {https://doi.org/10.1145/3158093},
  doi       = {10.1145/3158093},
  timestamp = {Wed, 17 Feb 2021 08:54:09 +0100},
  biburl    = {https://dblp.org/rec/journals/pacmpl/BernardyBNJS18.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{10.1145/2908080.2908093,
author = {Polikarpova, Nadia and Kuraj, Ivan and Solar-Lezama, Armando},
title = {Program Synthesis from Polymorphic Refinement Types},
year = {2016},
isbn = {9781450342612},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2908080.2908093},
doi = {10.1145/2908080.2908093},
abstract = {We present a method for synthesizing recursive functions that provably satisfy a given specification in the form of a polymorphic refinement type. We observe that such specifications are particularly suitable for program synthesis for two reasons. First, they offer a unique combination of expressive power and decidability, which enables automatic verification—and hence synthesis—of nontrivial programs. Second, a type-based specification for a program can often be effectively decomposed into independent specifications for its components, causing the synthesizer to consider fewer component combinations and leading to a combinatorial reduction in the size of the search space. At the core of our synthesis procedure is a newalgorithm for refinement type checking, which supports specification decomposition. We have evaluated our prototype implementation on a large set of synthesis problems and found that it exceeds the state of the art in terms of both scalability and usability. The tool was able to synthesize more complex programs than those reported in prior work (several sorting algorithms and operations on balanced search trees), as well as most of the benchmarks tackled by existing synthesizers, often starting from a more concise and intuitive user input.},
booktitle = {Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {522–538},
numpages = {17},
keywords = {Predicate Abstraction, Program Synthesis, Functional Programming, Refinement Types},
location = {Santa Barbara, CA, USA},
series = {PLDI '16}
}

@article{10.1145/2544173.2509555,
author = {Kneuss, Etienne and Kuraj, Ivan and Kuncak, Viktor and Suter, Philippe},
title = {Synthesis modulo Recursive Functions},
year = {2013},
issue_date = {October 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {48},
number = {10},
issn = {0362-1340},
url = {https://doi.org/10.1145/2544173.2509555},
doi = {10.1145/2544173.2509555},
abstract = {We describe techniques for synthesis and verification of recursive functional programs over unbounded domains. Our techniques build on top of an algorithm for satisfiability modulo recursive functions, a framework for deductive synthesis, and complete synthesis procedures for algebraic data types. We present new counterexample-guided algorithms for constructing verified programs. We have implemented these algorithms in an integrated environment for interactive verification and synthesis from relational specifications. Our system was able to synthesize a number of useful recursive functions that manipulate unbounded numbers and data structures.},
journal = {SIGPLAN Not.},
month = {oct},
pages = {407–426},
numpages = {20},
keywords = {satisfiability modulo theories, software synthesis, inductive learning}
}

@inproceedings{10.1145/2509136.2509555,
author = {Kneuss, Etienne and Kuraj, Ivan and Kuncak, Viktor and Suter, Philippe},
title = {Synthesis modulo Recursive Functions},
year = {2013},
isbn = {9781450323741},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2509136.2509555},
doi = {10.1145/2509136.2509555},
pages = {407–426},
numpages = {20},
keywords = {inductive learning, satisfiability modulo theories, software synthesis},
location = {Indianapolis, Indiana, USA},
series = {OOPSLA '13}
}

@inproceedings{quantitative-type-theory,
  author    = {Robert Atkey},
  title     = {Syntax and {S}emantics of {Q}uantitative {T}ype {T}heory},
  booktitle = {Proceedings of the 33rd Annual {ACM/IEEE} Symposium on Logic in Computer
               Science, {LICS} 2018, Oxford, UK, July 09-12, 2018},
  pages     = {56--65},
  year      = {2018},
  url       = {https://doi.org/10.1145/3209108.3209189},
  doi       = {10.1145/3209108.3209189},
  timestamp = {Wed, 21 Nov 2018 12:44:18 +0100},
  biburl    = {https://dblp.org/rec/bib/conf/lics/Atkey18},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@Inbook{McBride2016,
author="McBride, Conor",
editor="Lindley, Sam
and McBride, Conor
and Trinder, Phil
and Sannella, Don",
title="I Got Plenty o' Nuttin'",
bookTitle="A List of Successes That Can Change the World: Essays Dedicated to Philip Wadler on the Occasion of His 60th Birthday",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="207--233",
isbn="978-3-319-30936-1",
doi="10.1007/978-3-319-30936-1\_12"
}

@article{10.1145/3607862,
author = {Abel, Andreas and Danielsson, Nils Anders and Eriksson, Oskar},
title = {A Graded Modal Dependent Type Theory with a Universe and Erasure, Formalized},
year = {2023},
issue_date = {August 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {ICFP},
url = {https://doi.org/10.1145/3607862},
doi = {10.1145/3607862},
journal = {Proc. ACM Program. Lang.},
month = {aug},
articleno = {220},
numpages = {35},
keywords = {formalization, graded modal type theory, linearity, modalities, dependent types, erasure}
}

  

@phdthesis{coeffects-thesis,
  author       = {Petricek, Tomas}, 
  title        = {Context-aware programming languages},
  school       = {University of Cambridge},
  year         = {2017},
  month        = {3},
}

@article{Lago_2012,
   title={Linear Dependent Types and Relative Completeness},
   volume={Volume 8, Issue 4},
   ISSN={1860-5974},
   url={http://dx.doi.org/10.2168/LMCS-8(4:11)2012},
   DOI={10.2168/lmcs-8(4:11)2012},
   journal={Logical Methods in Computer Science},
   publisher={Centre pour la Communication Scientifique Directe (CCSD)},
   author={Lago, Ugo Dal and Gaboardi, Marco},
   year={2012},
   month=oct }


@inproceedings{petricek2014coeffects,
  title={Coeffects: a calculus of context-dependent computation},
  author={Petricek, Tomas and Orchard, Dominic and Mycroft, Alan},
  booktitle={Proceedings of the 19th ACM SIGPLAN international conference on Functional programming},
  pages={123--135},
  year={2014},
  doi={10.1145/2692915.2628160},
  organization={ACM}
}

@inproceedings{10.1145/2737924.2737977,
author = {Feser, John K. and Chaudhuri, Swarat and Dillig, Isil},
title = {Synthesizing Data Structure Transformations from Input-Output Examples},
year = {2015},
isbn = {9781450334686},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2737924.2737977},
doi = {10.1145/2737924.2737977},
abstract = {We present a method for example-guided synthesis of functional programs over recursive data structures. Given a set of input-output examples, our method synthesizes a program in a functional language with higher-order combinators like map and fold. The synthesized program is guaranteed to be the simplest program in the language to fit the examples. Our approach combines three technical ideas: inductive generalization, deduction, and enumerative search. First, we generalize the input-output examples into hypotheses about the structure of the target program. For each hypothesis, we use deduction to infer new input/output examples for the missing subexpressions. This leads to a new subproblem where the goal is to synthesize expressions within each hypothesis. Since not every hypothesis can be realized into a program that fits the examples, we use a combination of best-first enumeration and deduction to search for a hypothesis that meets our needs. We have implemented our method in a tool called λ2, and we evaluate this tool on a large set of synthesis problems involving lists, trees, and nested data structures. The experiments demonstrate the scalability and broad scope of λ2. A highlight is the synthesis of a program believed to be the world's earliest functional pearl.},
booktitle = {Proceedings of the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {229–239},
numpages = {11},
keywords = {data transformations, programming by example, search-based synthesis, Program synthesis, automated deduction},
location = {Portland, OR, USA},
series = {PLDI '15}
}

@article{10.1145/2813885.2737977,
author = {Feser, John K. and Chaudhuri, Swarat and Dillig, Isil},
title = {Synthesizing Data Structure Transformations from Input-Output Examples},
year = {2015},
issue_date = {June 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {50},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/2813885.2737977},
doi = {10.1145/2813885.2737977},
abstract = {We present a method for example-guided synthesis of functional programs over recursive data structures. Given a set of input-output examples, our method synthesizes a program in a functional language with higher-order combinators like map and fold. The synthesized program is guaranteed to be the simplest program in the language to fit the examples. Our approach combines three technical ideas: inductive generalization, deduction, and enumerative search. First, we generalize the input-output examples into hypotheses about the structure of the target program. For each hypothesis, we use deduction to infer new input/output examples for the missing subexpressions. This leads to a new subproblem where the goal is to synthesize expressions within each hypothesis. Since not every hypothesis can be realized into a program that fits the examples, we use a combination of best-first enumeration and deduction to search for a hypothesis that meets our needs. We have implemented our method in a tool called λ2, and we evaluate this tool on a large set of synthesis problems involving lists, trees, and nested data structures. The experiments demonstrate the scalability and broad scope of λ2. A highlight is the synthesis of a program believed to be the world's earliest functional pearl.},
journal = {SIGPLAN Not.},
month = {jun},
pages = {229–239},
numpages = {11},
keywords = {programming by example, data transformations, search-based synthesis, Program synthesis, automated deduction}
}

@inproceedings{10.5555/1624562.1624585,
author = {Green, Cordell},
title = {Application of Theorem Proving to Problem Solving},
year = {1969},
publisher = {Morgan Kaufmann Publishers Inc.},
address = {San Francisco, CA, USA},
abstract = {This paper shows how an extension of the resolution proof procedure can be used to construct problem solutions. The extended proof procedure can solve problems involving state transformations. The paper explores several alternate problem representations and provides a discussion of solutions to sample problems including the "Monkey and Bananas" puzzle and the 'Tower of Hanoi" puzzle. The paper exhibits solutions to these problems obtained by QA3, a computer program bused on these theorem-proving methods. In addition, the paper shows how QA3 can write simple computer programs and can solve practical problems for a simple robot.},
booktitle = {Proceedings of the 1st International Joint Conference on Artificial Intelligence},
pages = {219–239},
numpages = {21},
keywords = {resolution, question answering, state transformations, automatic programming, robots, program writing, theorem proving, problem solving},
location = {Washington, DC},
series = {IJCAI'69}
}

@thesis{oserathesis,
author = {Osera, Peter-Michael Santos},
title = {Program Synthesis With Types},
year = {2015},
biburl    = {https://repository.upenn.edu/edissertations/1926}
}

@misc{pfenninglecture,
  author        = {Pfenning, Frank},
  title         = {Lecture notes in Linear Logic},
  month         = {January},
  year          = {2002},
  publisher={Carnegie Mellon University},
  bibsource = {https://www.cs.cmu.edu/~fp/courses/15816-f01/}
}

@inproceedings{hughes:lirmm-03271465,
  TITLE = {{Linear Exponentials as Graded Modal Types}},
  AUTHOR = {Hughes, Jack and Marshall, Daniel and Wood, James and Orchard, Dominic},
  URL = {https://hal-lirmm.ccsd.cnrs.fr/lirmm-03271465},
  BOOKTITLE = {{5th International Workshop on Trends in Linear Logic and Applications (TLLA 2021)}},
  ADDRESS = {Rome (virtual), Italy},
  YEAR = {2021},
  MONTH = Jun,
  PDF = {https://hal-lirmm.ccsd.cnrs.fr/lirmm-03271465/file/TLLA_2021_paper_11.pdf},
  HAL_ID = {lirmm-03271465},
  HAL_VERSION = {v1},
}

@article{DBLP:journals/pacmpl/AbelB20,
  author    = {Andreas Abel and
               Jean{-}Philippe Bernardy},
  title     = {A unified view of modalities in type systems},
  journal   = {Proc. {ACM} Program. Lang.},
  volume    = {4},
  number    = {{ICFP}},
  pages     = {90:1--90:28},
  year      = {2020},
  url       = {https://doi.org/10.1145/3408972},
  doi       = {10.1145/3408972},
  timestamp = {Wed, 17 Feb 2021 08:54:09 +0100},
  biburl    = {https://dblp.org/rec/journals/pacmpl/AbelB20.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{jung2019stacked,
  title={Stacked Borrows: An Aliasing Model for Rust},
  author={Jung, Ralf and Dang, Hoang-Hai and Kang, Jeehoon and Dreyer, Derek},
  journal={Proceedings of the ACM on Programming Languages},
  volume={4},
  number={POPL},
  pages={1--32},
  year={2019},
  publisher={ACM New York, NY, USA}
}

@article{DBLP:journals/corr/abs-2108-07732,
  author       = {Jacob Austin and
                  Augustus Odena and
                  Maxwell I. Nye and
                  Maarten Bosma and
                  Henryk Michalewski and
                  David Dohan and
                  Ellen Jiang and
                  Carrie J. Cai and
                  Michael Terry and
                  Quoc V. Le and
                  Charles Sutton},
  title        = {Program Synthesis with Large Language Models},
  journal      = {CoRR},
  volume       = {abs/2108.07732},
  year         = {2021},
  url          = {https://arxiv.org/abs/2108.07732},
  eprinttype    = {arXiv},
  eprint       = {2108.07732},
  timestamp    = {Fri, 29 Apr 2022 17:42:58 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/abs-2108-07732.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@misc{jain2021jigsaw,
      title={Jigsaw: Large Language Models meet Program Synthesis},
      author={Naman Jain and Skanda Vaidyanath and Arun Iyer and Nagarajan Natarajan and Suresh Parthasarathy and Sriram Rajamani and Rahul Sharma},
      year={2021},
      eprint={2112.02969},
      archivePrefix={arXiv},
      primaryClass={cs.SE}
}

@article{fiala2023leveraging,
  title={{Leveraging Rust Types for Program Synthesis}},
  author={Fiala, Jonas and Itzhaky, Shachar and M{\"u}ller, Peter and Polikarpova, Nadia and Sergey, Ilya},
  journal={To appear in the Proceedings of PLDI},
  year={2023}
}

@article{DBLP:journals/pacmpl/ChoudhuryEEW21,
  author       = {Pritam Choudhury and
                  Harley Eades III and
                  Richard A. Eisenberg and
                  Stephanie Weirich},
  title        = {A graded dependent type system with a usage-aware semantics},
  journal      = {Proc. {ACM} Program. Lang.},
  volume       = {5},
  number       = {{POPL}},
  pages        = {1--32},
  year         = {2021},
  url          = {https://doi.org/10.1145/3434331},
  doi          = {10.1145/3434331},
  timestamp    = {Thu, 14 Oct 2021 08:48:51 +0200},
  biburl       = {https://dblp.org/rec/journals/pacmpl/ChoudhuryEEW21.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/cav/AlbarghouthiGK13,
  author       = {Aws Albarghouthi and
                  Sumit Gulwani and
                  Zachary Kincaid},
  title        = {Recursive Program Synthesis},
  booktitle    = {Computer Aided Verification - 25th International Conference, {CAV}
                  2013, Saint Petersburg, Russia, July 13-19, 2013. Proceedings},
  pages        = {934--950},
  year         = {2013},
  url          = {https://doi.org/10.1007/978-3-642-39799-8\_67},
  doi          = {10.1007/978-3-642-39799-8\_67},
  timestamp    = {Wed, 07 Dec 2022 23:12:58 +0100},
  biburl       = {https://dblp.org/rec/conf/cav/AlbarghouthiGK13.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/icalp/PetricekOM13,
  author       = {Tomas Petricek and
                  Dominic A. Orchard and
                  Alan Mycroft},
  title        = {Coeffects: Unified Static Analysis of Context-Dependence},
  booktitle    = {Automata, Languages, and Programming - 40th International Colloquium,
                  {ICALP} 2013, Riga, Latvia, July 8-12, 2013, Proceedings, Part {II}},
  pages        = {385--397},
  year         = {2013},
  url          = {https://doi.org/10.1007/978-3-642-39212-2\_35},
  doi          = {10.1007/978-3-642-39212-2\_35},
  timestamp    = {Sun, 02 Jun 2019 21:28:07 +0200},
  biburl       = {https://dblp.org/rec/conf/icalp/PetricekOM13.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{DBLP:journals/corr/OrchardPM14,
  author       = {Dominic A. Orchard and
                  Tomas Petricek and
                  Alan Mycroft},
  title        = {The semantic marriage of monads and effects},
  journal      = {CoRR},
  volume       = {abs/1401.5391},
  year         = {2014},
  url          = {http://arxiv.org/abs/1401.5391},
  eprinttype    = {arXiv},
  eprint       = {1401.5391},
  timestamp    = {Mon, 13 Aug 2018 16:49:07 +0200},
  biburl       = {https://dblp.org/rec/journals/corr/OrchardPM14.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{10.1145/601775.601776,
author = {Wadler, Philip and Thiemann, Peter},
title = {The Marriage of Effects and Monads},
year = {2003},
issue_date = {January 2003},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {1},
issn = {1529-3785},
url = {https://doi.org/10.1145/601775.601776},
doi = {10.1145/601775.601776},
journal = {ACM Trans. Comput. Logic},
month = {jan},
pages = {1–32},
numpages = {32},
keywords = {effect, region, type, type reconstruction, Monad}
}

@inproceedings{DBLP:conf/esop/MoonEO21,
  author       = {Benjamin Moon and
                  Harley Eades III and
                  Dominic Orchard},
  editor       = {Nobuko Yoshida},
  title        = {Graded {M}odal {D}ependent {T}ype {T}heory},
  booktitle    = {Programming Languages and Systems - 30th European Symposium on Programming,
                  {ESOP} 2021, Held as Part of the European Joint Conferences on Theory
                  and Practice of Software, {ETAPS} 2021, Luxembourg City, Luxembourg,
                  March 27 - April 1, 2021, Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {12648},
  pages        = {462--490},
  publisher    = {Springer},
  year         = {2021},
  url          = {https://doi.org/10.1007/978-3-030-72019-3\_17},
  doi          = {10.1007/978-3-030-72019-3\_17},
  timestamp    = {Fri, 14 May 2021 08:34:21 +0200},
  biburl       = {https://dblp.org/rec/conf/esop/MoonEO21.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/esop/MarshallVO22,
  author       = {Daniel Marshall and
                  Michael Vollmer and
                  Dominic Orchard},
  editor       = {Ilya Sergey},
  title        = {Linearity and Uniqueness: An Entente Cordiale},
  booktitle    = {Programming Languages and Systems - 31st European Symposium on Programming,
                  {ESOP} 2022, Held as Part of the European Joint Conferences on Theory
                  and Practice of Software, {ETAPS} 2022, Munich, Germany, April 2-7,
                  2022, Proceedings},
  series       = {Lecture Notes in Computer Science},
  volume       = {13240},
  pages        = {346--375},
  publisher    = {Springer},
  year         = {2022},
  url          = {https://doi.org/10.1007/978-3-030-99336-8\_13},
  doi          = {10.1007/978-3-030-99336-8\_13},
  timestamp    = {Tue, 09 Aug 2022 07:29:40 +0200},
  biburl       = {https://dblp.org/rec/conf/esop/MarshallVO22.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{clean,
author="Smetsers, Sjaak
and Barendsen, Erik
and van Eekelen, Marko
and Plasmeijer, Rinus",
editor="Schneider, Hans J{\"u}rgen
and Ehrig, Hartmut",
title="Guaranteeing safe destructive updates through a type system with uniqueness information for graphs",
booktitle="Graph Transformations in Computer Science",
year="1994",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="358--379",
abstract="In this paper we present a type system for graph rewrite systems: uniqueness typing. It employs usage information to deduce whether an object is `unique' at a certain moment, i.e. is only locally accessible. In a type of a function it can be specified that the function requires a unique argument object. The correctness of type assignment guarantees that no external access on the original object will take place in the future. The presented type system is proven to be correct. We illustrate the power of the system by defining an elegant quicksort algorithm that performs the sorting in situ on the data structure.",
isbn="978-3-540-48333-5",
  doi       = {10.1007/3-540-57787-4\_23},
}

@article{DBLP:journals/jfp/Brady13,
  author       = {Edwin C. Brady},
  title        = {Idris, a general-purpose dependently typed programming language: Design
                  and implementation},
  journal      = {J. Funct. Program.},
  volume       = {23},
  number       = {5},
  pages        = {552--593},
  year         = {2013},
  url          = {https://doi.org/10.1017/S095679681300018X},
  doi          = {10.1017/S095679681300018X},
  timestamp    = {Sun, 21 Jun 2020 17:42:23 +0200},
  biburl       = {https://dblp.org/rec/journals/jfp/Brady13.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{milner1978theory,
  title={A theory of type polymorphism in programming},
  author={Milner, Robin},
  journal={Journal of computer and system sciences},
  volume={17},
  number={3},
  pages={348--375},
  year={1978},
  publisher={Elsevier}
}

@inproceedings{hinze2000new,
  title={A new approach to generic functional programming},
  author={Hinze, Ralf},
  booktitle={Proceedings of the 27th ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  pages={119--132},
  year={2000},
  doi={10.1145/325694.325709}
}

@article{girard1992bounded,
  title={Bounded linear logic: a modular approach to polynomial-time computability},
  author={Girard, Jean-Yves and Scedrov, Andre and Scott, Philip J},
  journal={Theoretical computer science},
  volume={97},
  number={1},
  pages={1--66},
  year={1992},
  doi={10.1016/0304-3975(92)90386-T},
  publisher={Elsevier}
}

@inproceedings{gaboardi2013linear,
  title={Linear dependent types for differential privacy},
  author={Gaboardi, Marco and Haeberlen, Andreas and Hsu, Justin and Narayan, Arjun and Pierce, Benjamin C},
  booktitle={Proceedings of the 40th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  pages={357--370},
  doi={10.1145/2429069.2429113},
  year={2013}
}

@unpublished{tale-of-two-calculi,
  title={A Tale of Two Graded Calculi: The Marriage of Coeffects and Graded Comonads},
  author={Anonymous}
}

@article{choudhury2021,
author = {Choudhury, Pritam and Eades III, Harley and Eisenberg, Richard A. and Weirich, Stephanie},
title = {A Graded Dependent Type System with a Usage-Aware Semantics},
year = {2021},
issue_date = {January 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {POPL},
url = {https://doi.org/10.1145/3434331},
doi = {10.1145/3434331},
journal = {Proc. ACM Program. Lang.},
month = jan,
articleno = {50},
numpages = {32},
keywords = {heap semantics, quantitative reasoning, Irrelevance, linearity}
}

@inproceedings{benton1992linear,
  title={Linear lambda-calculus and categorical models revisited},
  author={Benton, Nick and Bierman, Gavin and De Paiva, Valeria and Hyland, Martin},
  booktitle={International Workshop on Computer Science Logic},
  pages={61--84},
  year={1992},
  doi={10.1007/3-540-56992-8\_6},
  organization={Springer}
}

@inproceedings{jay1994shapely,
  title={Shapely types and shape polymorphism},
  author={Jay, C Barry and Cockett, J Robin B},
  booktitle={European Symposium on Programming},
  pages={302--316},
  year={1994},
  doi = {10.1007/3-540-57880-3\_20},
  organization={Springer}
}

@article{linear-haskell,
author = {Bernardy, Jean-Philippe and Boespflug, Mathieu and Newton, Ryan R. and Peyton Jones, Simon and Spiwack, Arnaud},
title = {Linear {H}askell: Practical Linearity in a Higher-Order Polymorphic Language},
year = {2017},
issue_date = {January 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2},
number = {POPL},
url = {https://doi.org/10.1145/3158093},
doi = {10.1145/3158093},
abstract = {Linear type systems have a long and storied history, but not a clear path forward to integrate with existing languages such as OCaml or Haskell. In this paper, we study a linear type system designed with two crucial properties in mind: backwards-compatibility and code reuse across linear and non-linear users of a library. Only then can the benefits of linear types permeate conventional functional programming. Rather than bifurcate types into linear and non-linear counterparts, we instead attach linearity to function arrows. Linear functions can receive inputs from linearly-bound values, but can also operate over unrestricted, regular values. To demonstrate the efficacy of our linear type system&nbsp;—&nbsp;both how easy it can be integrated in an existing language implementation and how streamlined it makes it to write programs with linear types&nbsp;—&nbsp;we implemented our type system in ghc, the leading Haskell compiler, and demonstrate two kinds of applications of linear types: mutable data with pure interfaces; and enforcing protocols in I/O-performing functions.},
journal = {Proc. ACM Program. Lang.},
month = dec,
articleno = {5},
numpages = {29},
keywords = {linear types, Haskell, linear logic, polymorphism, typestate, GHC, laziness}
}

@article{abel-barnardy-icfp2020,
author = {Abel, Andreas and Bernardy, Jean-Philippe},
title = {A Unified View of Modalities in Type Systems},
year = {2020},
issue_date = {August 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {ICFP},
url = {https://doi.org/10.1145/3408972},
doi = {10.1145/3408972},
abstract = {We propose to unify the treatment of a broad range of modalities in typed lambda calculi. We do so by defining a generic structure of modalities, and show that this structure arises naturally from the structure of intuitionistic logic, and as such finds instances in a wide range of type systems previously described in literature. Despite this generality, this structure has a rich metatheory, which we expose.},
journal = {Proc. ACM Program. Lang.},
month = aug,
articleno = {90},
numpages = {28},
keywords = {subtyping, linear types, modal logic}
}

@inproceedings{eisenberg2016visible,
  title={Visible type application},
  author={Eisenberg, Richard A and Weirich, Stephanie and Ahmed, Hamidhasan G},
  booktitle={European Symposium on Programming},
  pages={229--254},
  year={2016},
  doi = {10.1007/978-3-662-49498-1\_10},
  organization={Springer}
}

@InProceedings{bradyidris,
  author =	{Brady, Edwin},
  title =	{{Idris 2: Quantitative Type Theory in Practice}},
  booktitle =	{35th European Conference on Object-Oriented Programming (ECOOP 2021)},
  pages =	{9:1--9:26},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-190-0},
  ISSN =	{1868-8969},
  year =	{2021},
  volume =	{194},
  editor =	{M{\o}ller, Anders and Sridharan, Manu},
  publisher =	{Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{https://drops.dagstuhl.de/opus/volltexte/2021/14052},
  URN =		{urn:nbn:de:0030-drops-140527},
  doi =		{10.4230/LIPIcs.ECOOP.2021.9},
  annote =	{Keywords: Dependent types, linear types, concurrency}
}

Export Citations

    @article{10.1145/2775051.2676969,
    author = {Krishnaswami, Neelakantan R. and Pradic, Pierre and Benton, Nick},
    title = {Integrating Linear and Dependent Types},
    year = {2015},
    issue_date = {January 2015},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {50},
    number = {1},
    issn = {0362-1340},
    url = {https://doi.org/10.1145/2775051.2676969},
    doi = {10.1145/2775051.2676969},
    abstract = {In this paper, we show how to integrate linear types with type dependency, by extending the linear/non-linear calculus of Benton to support type dependency. Next, we give an application of this calculus by giving a proof-theoretic account of imperative programming, which requires extending the calculus with computationally irrelevant quantification, proof irrelevance, and a monad of computations. We show the soundness of our theory by giving a realizability model in the style of Nuprl, which permits us to validate not only the beta-laws for each type, but also the eta-laws. These extensions permit us to decompose Hoare triples into a collection of simpler type-theoretic connectives, yielding a rich equational theory for dependently-typed higher-order imperative programs. Furthermore, both the type theory and its model are relatively simple, even when all of the extensions are considered.},
    journal = {SIGPLAN Not.},
    month = {jan},
    pages = {17–30},
    numpages = {14},
    keywords = {proof irrelevance, linear types, separation logic, hoare triples, dependent types, intersection types}
    }

      

    @inproceedings{10.1145/2676726.2676969,
    author = {Krishnaswami, Neelakantan R. and Pradic, Pierre and Benton, Nick},
    title = {Integrating Linear and Dependent Types},
    year = {2015},
    isbn = {9781450333009},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/2676726.2676969},
    doi = {10.1145/2676726.2676969},
    booktitle = {Proceedings of the 42nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
    pages = {17–30},
    numpages = {14},
    keywords = {hoare triples, separation logic, linear types, intersection types, proof irrelevance, dependent types},
    location = {Mumbai, India},
    series = {POPL '15}
    }

      



@article{street1972formal,
  title={The formal theory of monads},
  author={Street, Ross},
  journal={Journal of Pure and Applied Algebra},
  volume={2},
  number={2},
  pages={149--168},
  doi = {10.1016/0022-4049(72)90019-9},
  year={1972},
  publisher={North-Holland}
}

@inproceedings{template-haskell,
author = {Sheard, Tim and Jones, Simon Peyton},
title = {Template Meta-Programming for {H}askell},
year = {2002},
isbn = {1581136056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/581690.581691},
doi = {10.1145/581690.581691},
abstract = {We propose a new extension to the purely functional programming language Haskell that supports compile-time meta-programming. The purpose of the system is to support the algorithmic construction of programs at compile-time.The ability to generate code at compile time allows the programmer to implement such features as polytypic programs, macro-like expansion, user directed optimization (such as inlining), and the generation of supporting data structures and functions from existing data structures and functions.Our design is being implemented in the Glasgow Haskell Compiler, ghc.},
booktitle = {Proceedings of the 2002 ACM SIGPLAN Workshop on Haskell},
pages = {1–16},
numpages = {16},
keywords = {templates, meta programming},
location = {Pittsburgh, Pennsylvania},
series = {Haskell '02}
}

@article{generic-deriving,
author = {Magalh\~{a}es, Jos\'{e} Pedro and Dijkstra, Atze and Jeuring, Johan and L\"{o}h, Andres},
title = {A {G}eneric {D}eriving {M}echanism for {H}askell},
year = {2010},
issue_date = {November 2010},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {45},
number = {11},
issn = {0362-1340},
url = {https://doi.org/10.1145/2088456.1863529},
doi = {10.1145/2088456.1863529},
abstract = {Haskell's deriving mechanism supports the automatic generation of instances for a number of functions. The Haskell 98 Report only specifies how to generate instances for the Eq, Ord, Enum, Bounded, Show, and Read classes. The description of how to generate instances is largely informal. The generation of instances imposes restrictions on the shape of datatypes, depending on the particular class to derive. As a consequence, the portability of instances across different compilers is not guaranteed.We propose a new approach to Haskell's deriving mechanism, which allows users to specify how to derive arbitrary class instances using standard datatype-generic programming techniques. Generic functions, including the methods from six standard Haskell 98 derivable classes, can be specified entirely within Haskell 98 plus multi-parameter type classes, making them lightweight and portable. We can also express Functor, Typeable, and many other derivable classes with our technique. We implemented our deriving mechanism together with many new derivable classes in the Utrecht Haskell Compiler.},
journal = {SIGPLAN Not.},
month = sep,
pages = {37–48},
numpages = {12},
keywords = {haskell, datatype-generic programming, type classes}
}

@article{power2002combining,
 author = {Power, John and Watanabe, Hiroshi},
 title = {Combining a monad and a comonad},
 journal = {Theoretical Computer Science},
 volume = {280},
 number = {1-2},
 year = {2002},
 issn = {0304-3975},
 pages = {137--162},
 doi = {10.1016/S0304-3975(01)00024-X},
 publisher = {Elsevier Science Publishers Ltd.},
 address = {Essex, UK}
}

@article{uustalu2006essence,
   title = {The {E}ssence of {D}ataflow {P}rogramming},
   journal = {Lecture Notes in Computer Science},
   publisher = {Springer Berlin / Heidelberg},
   volume = {4164},
   year = {November 2006},
   pages = {135-167},
   doi = {10.1007/11894100\_5},
   author = {Tarmo Uustalu and Varmo Vene}
}

@InProceedings{Terui01lics,
  author =  {K. Terui},
  title =  {Light Affine Lambda Calculus and Polytime Strong Normalization},
  booktitle =  "\rm{LICS '01}",
 publisher =	"IEEE Computer Society",
  pages =  {209-220},
  doi = {10.1109/LICS.2001.932498},
  year =  {2001},
}

@techreport{brookes1993intensional,
 author = {Brookes, Stephen and Stone, Kathryn V},
 title = {Monads and Comonads in Intensional Semantics},
 year = {1993},
 publisher = {Carnegie Mellon University},
 address = {Pittsburgh, PA, USA},
 url = {https://dl.acm.org/doi/10.5555/865105}
 }


@inproceedings{DBLP:journals/corr/abs-2112-14966,
  author       = {Jack Hughes and
                  Michael Vollmer and
                  Dominic Orchard},
  editor       = {Ugo Dal Lago and
                  Valeria de Paiva},
  title        = {Deriving Distributive Laws for Graded Linear Types},
  booktitle    = {Proceedings Second Joint International Workshop on Linearity {\&}
                  Trends in Linear Logic and Applications, Linearity{\&}TLLA@IJCAR-FSCD
                  2020, Online, 29-30 June 2020},
  series       = {{EPTCS}},
  volume       = {353},
  pages        = {109--131},
  year         = {2020},
  url          = {https://doi.org/10.4204/EPTCS.353.6},
  doi          = {10.4204/EPTCS.353.6},
  timestamp    = {Wed, 22 Mar 2023 07:28:23 +0100},
  biburl       = {https://dblp.org/rec/journals/corr/abs-2112-14966.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}
@inproceedings{DBLP:conf/lopstr/HughesO20,
  author    = {Jack Hughes and
               Dominic Orchard},
  title     = {Resourceful Program Synthesis from Graded Linear Types},
  booktitle = {Logic-Based Program Synthesis and Transformation - 30th International
               Symposium, {LOPSTR} 2020, Bologna, Italy, September 7-9, 2020, Proceedings},
  pages     = {151--170},
  year      = {2020},
  url       = {https://doi.org/10.1007/978-3-030-68446-4\_8},
  doi       = {10.1007/978-3-030-68446-4\_8},
  timestamp = {Tue, 02 Mar 2021 11:26:26 +0100},
  biburl    = {https://dblp.org/rec/conf/lopstr/HughesO20.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{ABRAMSKY19933,
title = {Computational interpretations of linear logic},
journal = {Theoretical Computer Science},
volume = {111},
number = {1},
pages = {3-57},
year = {1993},
issn = {0304-3975},
doi = {https://doi.org/10.1016/0304-3975(93)90181-R},
url = {https://www.sciencedirect.com/science/article/pii/030439759390181R},
author = {Samson Abramsky},
}

@inproceedings{DBLP:conf/ifip2/Wadler90,
  author       = {Philip Wadler},
  editor       = {Manfred Broy and
                  Cliff B. Jones},
  title        = {Linear Types can Change the World!},
  booktitle    = {Programming concepts and methods: Proceedings of the {IFIP} Working
                  Group 2.2, 2.3 Working Conference on Programming Concepts and Methods,
                  Sea of Galilee, Israel, 2-5 April, 1990},
  pages        = {561},
  publisher    = {North-Holland},
  year         = {1990},
  timestamp    = {Sat, 26 Dec 2020 18:17:05 +0100},
  biburl       = {https://dblp.org/rec/conf/ifip2/Wadler90.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@article{MUGGLETON1994629,
title = {Inductive Logic Programming: Theory and methods},
journal = {The Journal of Logic Programming},
volume = {19-20},
pages = {629-679},
year = {1994},
note = {Special Issue: Ten Years of Logic Programming},
issn = {0743-1066},
doi = {https://doi.org/10.1016/0743-1066(94)90035-3},
url = {https://www.sciencedirect.com/science/article/pii/0743106694900353},
author = {Stephen Muggleton and Luc {de Raedt}}
}
@inproceedings{flashfill,
author = {Gulwani, Sumit},
year = {2011},
month = {01},
pages = {317-330},
title = {Automating String Processing in Spreadsheets Using Input-Output Examples},
volume = {46},
journal = {ACM SIGPLAN Notices},
doi = {10.1145/1926385.1926423}
}